name: Build Google Dawn
on:
  push:
    tags:        
      - '**'   
  workflow_dispatch:

# Global Settings
env:
  DAWN_BRANCH: main
  DAWN_URL: https://github.com/google/dawn.git
  MSVC_PATH: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC'


jobs:
  config:
    name: "Find git revision"
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.config.outputs.revision }}
    steps:
      - name: Find revision
        shell: bash
        run: |
          echo "REVISION=$(git ls-remote ${{ env.DAWN_URL }} --heads ${{ env.DAWN_BRANCH }} | head -n 1 | cut -f 1)" >> $GITHUB_ENV
      - name: Configure properties
        id: config
        shell: bash
        run: |
          echo "REVISION: ${{ env.REVISION }}"
          echo "::set-output name=revision::${{ env.REVISION }}"


  build:
    name: "Build Dawn"
    needs: config
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Android
          # - target_os: android
          #   arch: arm
          #   custom_gnargs: use_custom_libcxx=false
          #   gclient_os: '["android", "unix"]'
          #   os: ubuntu-latest
          # - target_os: android
          #   arch: arm64
          #   custom_gnargs: use_custom_libcxx=false
          #   gclient_os: '["android", "unix"]'
          #   os: ubuntu-latest

          # iOS
          # - target_os: ios
          #   arch: arm
          #   custom_gnargs: use_custom_libcxx=false ios_enable_code_signing=false
          #   gclient_os: '["ios", "mac"]'
          #   os: macos-latest
          # - target_os: ios
          #   arch: arm64
          #   custom_gnargs: use_custom_libcxx=false ios_enable_code_signing=false
          #   gclient_os: '["ios", "mac"]'
          #   os: macos-latest

          # Linux
          - target_os: linux
            arch: x64
            custom_gnargs: use_custom_libcxx=false use_glib=false
            gclient_os: '["linux"]'
            os: ubuntu-latest

          # macOS
          - target_os: mac
            arch: arm64
            custom_gnargs: use_custom_libcxx=false
            gclient_os: '["mac"]'
            os: macos-latest
          - target_os: mac
            arch: x64
            custom_gnargs: use_custom_libcxx=false
            gclient_os: '["mac"]'
            os: macos-latest
          
          # Windows
          - target_os: win
            arch: x64
            msvc_arch: amd64_x86
            custom_gnargs: is_clang=false
            gclient_os: '["win"]'
            os: windows-latest
    env:
      DEPOT_TOOLS: ${{ github.workspace }}/depot_tools
      DEPOT_TOOLS_WIN_TOOLCHAIN: 0
      GNARGS: 'target_os=\"${{ matrix.target_os }}\" target_cpu=\"${{ matrix.arch }}\" ${{ matrix.custom_gnargs }} dawn_use_angle=false dawn_use_swiftshader=false use_system_xcode=true'
      GNARGS_RELEASE: "is_debug=false strip_debug_info=true symbol_level=0"
      OUTPUT_FILENAME: ${{ matrix.target_os }}_${{ matrix.arch }}.tar.gz

    steps:
      - name: Clone Dawn
        run: |
          git clone ${{ DAWN_URL }} .
      
      - name: Install MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Linux dependencies
        if: ${{ matrix.target_os == 'linux' }}
        run: |
          sudo apt-get install libxrandr-dev libxinerama-dev libxcursor-dev mesa-common-dev libx11-xcb-dev pkg-config nodejs npm

      - name: Install depot tools
        shell: bash
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git $DEPOT_TOOLS
          echo $DEPOT_TOOLS >> $GITHUB_PATH

      - name: Bootstrap the gclient configuration
        run: |
          cp scripts/standalone.gclient .gclient

      # - name: Setup gclient build config
      #   shell: bash
      #   run: |
      #     # Create config
      #     mkdir out
      #     cp gclient out/.gclient
      #     echo 'target_os = ${{ matrix.gclient_os }}' >> out/.gclient

      - name: Sync Dawn
        run: |
          gclient sync
#          gclient sync --verbose --revision ${{ needs.config.outputs.revision }}

      - name: Create output directory
        shell: bash
        run: |
          mkdir -p output/include
          mkdir -p output/lib/Release
          mkdir -p output/lib/Debug

      - name: Build - Debug
        shell: bash
        run: |
          gn gen out --args="${{ env.GNARGS }}"
          ninja -v -C out 

      # dawn_native_shared dawn_platform_shared dawn_proc_shared dawn_wire_shared dawncpp

      - name: Pack - Headers
        shell: bash
        run: |
          cp -v -rf out/src/out/gen/src/include/* output/include
          cp -v -rf out/src/include/* output/include

      - name: Pack - Debug
        shell: bash
        run: |
          cp -v -rf out/src/out/*dawn_native.* output/lib/Debug
          cp -v -rf out/src/out/*dawn_platform.* output/lib/Debug
          cp -v -rf out/src/out/*dawn_proc.* output/lib/Debug
          cp -v -rf out/src/out/*dawn_wire.* output/lib/Debug

      - name: Build - Release
        shell: bash
        run: |
          echo "Clean up debug build to free up space"
          rm -rf out
          gn gen out --args="${{ env.GNARGS }} ${{ env.GNARGS_RELEASE }}"
          ninja -v -C out dawn_native_shared dawn_platform_shared dawn_proc_shared dawn_wire_shared dawncpp

      - name: Pack - Release
        shell: bash
        run: |
          cp -v -rf out/src/out/*dawn_native.* output/lib/Release
          cp -v -rf out/src/out/*dawn_platform.* output/lib/Release
          cp -v -rf out/src/out/*dawn_proc.* output/lib/Release
          cp -v -rf out/src/out/*dawn_wire.* output/lib/Release

      - name: Print output
        shell: bash
        run: |
          ls -R output

      - name: Create Tar File
        shell: bash
        run: |
          tar -C output -v -czf ${{ env.OUTPUT_FILENAME }} lib include

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: matrix-output
          path: ${{ env.OUTPUT_FILENAME }}

      - name: Cleanup space
        shell: bash
        run: |
          rm -rf out
  release:
    name: "Publish to release"
    if: always()
    runs-on: ubuntu-latest
    needs: [config, build]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: matrix-output
          path: out

      - name: Publish to release
        uses: softprops/action-gh-release@v1
        with:
          files: out/*
          body: |
            ## ${{ env.DAWN_BRANCH }}
            ${{ env.DAWN_URL }}
            Revision: ${{ needs.config.outputs.revision }}
          
      - name: Cleanup space
        shell: bash
        run: |
          rm -rf out
